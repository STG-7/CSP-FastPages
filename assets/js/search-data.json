{
  
    
        "post0": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . import sqlite3 database = &#39;files/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . NameError Traceback (most recent call last) d: APCSP _notebooks 2023-03-16-AP-unit2-4b.ipynb Cell 8 in &lt;cell line: 31&gt;() &lt;a href=&#39;vscode-notebook-cell:/d%3A/APCSP/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X10sZmlsZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; cursor.close() &lt;a href=&#39;vscode-notebook-cell:/d%3A/APCSP/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X10sZmlsZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; conn.close() &gt; &lt;a href=&#39;vscode-notebook-cell:/d%3A/APCSP/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X10sZmlsZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; create() d: APCSP _notebooks 2023-03-16-AP-unit2-4b.ipynb Cell 8 in create() &lt;a href=&#39;vscode-notebook-cell:/d%3A/APCSP/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X10sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; dob = input(&#34;Enter your date of birth &#39;YYYY-MM-DD&#39;&#34;) &lt;a href=&#39;vscode-notebook-cell:/d%3A/APCSP/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X10sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; # Connect to the database file &gt; &lt;a href=&#39;vscode-notebook-cell:/d%3A/APCSP/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X10sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; conn = sqlite3.connect(database) &lt;a href=&#39;vscode-notebook-cell:/d%3A/APCSP/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X10sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; # Create a cursor object to execute SQL commands &lt;a href=&#39;vscode-notebook-cell:/d%3A/APCSP/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X10sZmlsZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; cursor = conn.cursor() NameError: name &#39;database&#39; is not defined . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://stg-7.github.io/FastPages/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . TypeError Traceback (most recent call last) d: GitHub FastPages _notebooks 2023-03-13-AP-unit2-4a.ipynb Cell 4 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; &#34;&#34;&#34; &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; These imports define the key objects &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; &#34;&#34;&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; from flask import Flask &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; from flask_sqlalchemy import SQLAlchemy &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; &#34;&#34;&#34; &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; These object and definitions are used throughout the Jupyter Notebook. &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; &#34;&#34;&#34; File ~ AppData Local Packages PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0 LocalCache local-packages Python310 site-packages flask __init__.py:4, in &lt;module&gt; 1 from markupsafe import escape 2 from markupsafe import Markup -&gt; 4 from . import json as json 5 from .app import Flask as Flask 6 from .app import Request as Request File ~ AppData Local Packages PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0 LocalCache local-packages Python310 site-packages flask json __init__.py:8, in &lt;module&gt; 4 import typing as t 6 from jinja2.utils import htmlsafe_json_dumps as _jinja_htmlsafe_dumps -&gt; 8 from ..globals import current_app 9 from .provider import _default 11 if t.TYPE_CHECKING: # pragma: no cover File ~ AppData Local Packages PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0 LocalCache local-packages Python310 site-packages flask globals.py:56, in &lt;module&gt; 54 _cv_app: ContextVar[&#34;AppContext&#34;] = ContextVar(&#34;flask.app_ctx&#34;) 55 __app_ctx_stack = _FakeStack(&#34;app&#34;, _cv_app) &gt; 56 app_ctx: &#34;AppContext&#34; = LocalProxy( # type: ignore[assignment] 57 _cv_app, unbound_message=_no_app_msg 58 ) 59 current_app: &#34;Flask&#34; = LocalProxy( # type: ignore[assignment] 60 _cv_app, &#34;app&#34;, unbound_message=_no_app_msg 61 ) 62 g: &#34;_AppCtxGlobals&#34; = LocalProxy( # type: ignore[assignment] 63 _cv_app, &#34;g&#34;, unbound_message=_no_app_msg 64 ) TypeError: LocalProxy.__init__() got an unexpected keyword argument &#39;unbound_message&#39; . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . NameError Traceback (most recent call last) d: GitHub FastPages _notebooks 2023-03-13-AP-unit2-4a.ipynb Cell 6 in &lt;cell line: 17&gt;() &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W5sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W5sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; # Define the User class to manage actions in the &#39;users&#39; table &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W5sZmlsZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W5sZmlsZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; # -- a.) db.Model is like an inner layer of the onion in ORM &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W5sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; # -- b.) User represents data we want to store, something that is built on db.Model &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W5sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL &gt; &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W5sZmlsZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; class User(db.Model): &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W5sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; __tablename__ = &#39;users&#39; # table name is plural, class name is singular &lt;a href=&#39;vscode-notebook-cell:/d%3A/GitHub/FastPages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W5sZmlsZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; # Define the User schema with &#34;vars&#34; from object NameError: name &#39;db&#39; is not defined . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; . Builds working data for testing . def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) . users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) . initUsers() . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://stg-7.github.io/FastPages/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . HACK #1 - AP PREP . from PIL import Image quizscore = Image.open(&quot;../images/cool.png&quot;) display(quizscore) . HACK #2 - Implementing into My PBL project . import pandas as pd df = pd.read_json(&#39;files/nfl.json&#39;) # Prinitng out objects in terms of Height (Ascending) print(df.sort_values(by=[&#39;Height&#39;], ascending=True)) print() print() print() # Prinitng out objects in terms of Weight (Ascending) print(df.sort_values(by=[&#39;Weight&#39;], ascending=True)) print() print() print() # Prinitng out objects in terms of QB Ranking (Ascending) print(df.sort_values(by=[&#39;QB Ranking&#39;], ascending=True)) print() print() print() . Height Weight QB Ranking 1 70 214 2 8 71 192 9 6 72 207 7 7 72 207 8 9 73 203 10 11 73 207 12 10 74 224 11 3 75 217 4 4 75 231 5 5 75 213 6 0 76 244 1 2 76 229 3 Height Weight QB Ranking 8 71 192 9 9 73 203 10 6 72 207 7 7 72 207 8 11 73 207 12 5 75 213 6 1 70 214 2 3 75 217 4 10 74 224 11 2 76 229 3 4 75 231 5 0 76 244 1 Height Weight QB Ranking 0 76 244 1 1 70 214 2 2 76 229 3 3 75 217 4 4 75 231 5 5 75 213 6 6 72 207 7 7 72 207 8 8 71 192 9 9 73 203 10 10 74 224 11 11 73 207 12 . print(df.sort_values(by=[&#39;Height&#39;], ascending=False)) print() print() print() # Prinitng out objects in terms of Weight print(df.sort_values(by=[&#39;Weight&#39;], ascending=False)) print() print() print() # Prinitng out objects in terms of QB Ranking print(df.sort_values(by=[&#39;QB Ranking&#39;], ascending=False)) print() print() print() . Height Weight QB Ranking 0 76 244 1 2 76 229 3 3 75 217 4 4 75 231 5 5 75 213 6 10 74 224 11 9 73 203 10 11 73 207 12 6 72 207 7 7 72 207 8 8 71 192 9 1 70 214 2 Height Weight QB Ranking 0 76 244 1 4 75 231 5 2 76 229 3 10 74 224 11 3 75 217 4 1 70 214 2 5 75 213 6 6 72 207 7 7 72 207 8 11 73 207 12 9 73 203 10 8 71 192 9 Height Weight QB Ranking 11 73 207 12 10 74 224 11 9 73 203 10 8 71 192 9 7 72 207 8 6 72 207 7 5 75 213 6 4 75 231 5 3 75 217 4 2 76 229 3 1 70 214 2 0 76 244 1 . print(&quot;Average Quarterback Height&quot;) print(df[&#39;Height&#39;].mean()) print() print(&quot;Median Quarterback Height&quot;) print(df[&#39;Height&#39;].median()) print() # Printing out Average and Median Quarterback Height print(&quot;Average Quarterback Weight&quot;) print(df[&#39;Weight&#39;].mean()) print() print(&quot;Median Quarterback Weight&quot;) print(df[&#39;Weight&#39;].median()) print() # Printing out Tallest and Shortest Quarterbacks print(&quot;Tallest Quarterback&quot;) print(df[df.Height == df.Height.max()]) print() print(&quot;Shortest Quarterback&quot;) print(df[df.Height == df.Height.min()]) . Average Quarterback Height 73.5 Median Quarterback Height 73.5 Average Quarterback Weight 215.66666666666666 Median Quarterback Weight 213.5 Tallest Quarterback Height Weight QB Ranking 0 76 244 1 2 76 229 3 Shortest Quarterback Height Weight QB Ranking 1 70 214 2 . EXPLANATION: . In the code box above, I tried using many Pandas helpers. Instead of using an online dataset, I created my own dataset and pulled the 2023 NFL Quarterback Prospects data directly from the university. I obtained information on the top 12 quarterbacks from this year&#39;s draft and used multiple sources to verify the information I entered. In this case, the three columns of data were their height, weight and quarterback rank based on multiple analysts. I sorted through this data and used Panda to list the top five quarterback heights, tallest and shortest quarterbacks, average quarterback height, average quarterback weight, and something unique that I did was use a descriptive statistics function unique to Panda to list. all IQR ranges, maximum values, etc. based on the generated dataset. All data was saved in nfl.json which is a readable file. .",
            "url": "https://stg-7.github.io/FastPages/2.3hacks.html",
            "relUrl": "/2.3hacks.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "MCQ Test Blog 3/7/2023 (Tri. 2 Final)",
            "content": "Score Overview . from PIL import Image huh = Image.open(&quot;../images/huh.png&quot;) display(huh) . Wrong Answers . from PIL import Image wrong1 = Image.open(&quot;../images/wrong1.png&quot;) wrong2 = Image.open(&quot;../images/wrong2.png&quot;) wrong3 = Image.open(&quot;../images/wrong3.png&quot;) display(wrong1) display(wrong2) display(wrong3) . Correcting the Wrong Answers . Question 44 . The Corect Answer is B. The first call to printArgs displays the number 1, followed by the string &quot;*&quot;, followed by the number 1. The second call to printArgs displays the number 2, followed by the string &quot;&quot;, followed by the number 2. . Question 45 . The Correct Answers are C and D. Procedural abstraction helps improve code readability and Procedures created to solve subproblems of a larger problem are called by name. . Question 49 . The Correct Answer is B. Simulations are limited by the model that is used. There may be many reasons for using a simplified model, including ease of implementation. .",
            "url": "https://stg-7.github.io/FastPages/final2.html",
            "relUrl": "/final2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "2.2 Data Compression, Images HACKS",
            "content": "Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . HACK #1 - Happy Face Image . from PIL import Image smile = Image.open(&quot;../images/smiley.png&quot;) display(smile) . HACK #2 - AP PREP . Quiz Overview . from PIL import Image quizoverview = Image.open(&quot;../images/quiz1score.png&quot;) display(quizoverview) . Wong Answer + Solution . from PIL import Image wrong = Image.open(&quot;../images/quiz1wrong.png&quot;) display(wrong) . Solution: Lossless compression algorithms are guaranteed to be able to reconstruct the original data, while lossy compression algorithms are not. . HACK #3 - PROGRAMMING PARADIGMS . import numpy as np from PIL import Image # Load the image image = Image.open(&quot;../images/effeltower.jpg&quot;) image.info[&#39;Title&#39;] = &#39;Eiffel Tower&#39; image.info[&#39;Author&#39;] = &#39;Shaurya Goel&#39; image.info[&#39;Year&#39;] = &#39;2023&#39; img_array = np.asarray(image) binary_pixels = np.unpackbits(img_array, axis=-1) hex_pixels = np.apply_along_axis(lambda x: hex(int(&#39;&#39;.join(map(str, x)), 2))[2:].zfill(2), -1, binary_pixels) blue_image = np.copy(img_array) blue_image[:, :, 1] = 0 blue_image[:, :, 0] = 0 blue_image = Image.fromarray(blue_image) resized_image = blue_image.resize((blue_image.width // 4, blue_image.height // 4)) display(resized_image) . PARADIGM EXPLANATION: . In this HACK, I made an effort to use bluescale (a different byte manipulation technique), print metadata (vital information about the image), and alter the image&#39;s size using scaling techniques. I used a photograph I took, effeltower.jpg, and used the blue image program to convert it to a blue image by setting the green and blue channels to 0 (in &quot;RGB&quot;). Three printed pieces of image metadata were also added by me. This information contained the image&#39;s title, the photographer&#39;s name, and the year it was shot. When a jpg/jpeg file is compressed, additional metadata with the notation &quot;jfif&quot; is present. . TWO IMAGES REPRESENTING LOSSY AND LOSSLESS COMPRESSION: . Lossy = lassen-volcano.jpg | Lossless = green-square-16.png | . The lossy compression example will be the lassen-volcano.jpg image. This is owing to the fact that image file compression will undoubtedly result in a significantly smaller file size, but it will also result in a decrease in image quality because of the image&#39;s fine details and range of colors. It&#39;s probably going to get fuzzier.On the other hand, the green-square-16.png image can be used as an illustration of lossless compression. Because there is only one color in that image, the RGB pixel values will always be the same (without any intentional alteration of the image), the image quality will not change even though the image file size will reduce. .",
            "url": "https://stg-7.github.io/FastPages/2.2hacks.html",
            "relUrl": "/2.2hacks.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "MCQ Test Blog 1/30/2023",
            "content": "MCQ Reflection and Blog . Overall score . . I got questions 17,29, and 50 wrong. | . ## Correcting Wrong Answers . ### Question 17 . . You had to choose one of two answers to this question. I chose the first option (A) correctly, but I chose Option B in error. When I reread the question, I saw that Option D contained a nested if-else statement that, unlike Option B, produced the same outcome as the question’s initial description (val1 &amp; not val2). . Question 29 . . The correct answer is A not B, because as it roates three times it will be facing downward. Furthermore, it will be in middle of the grid as the code goes to completion. . Question 50 . . The answer to the above-given question is option D. - Letter V . Further information and research on ASCII character encoding: . An international standard for encoding the Latin script was developed with the help of the American Standard Code for Information Interchange (ASCII). ASCII was first established in 1963 to enable the interpretation of data between computers. Symbols, numbers, lowercase and uppercase letters, and some instructions are represented. A radix-2 number system needs 7 bits since ASCII is encoded using 1s and 0s. Characters can be encoded using 2 to the power of 7 = 128 different number combinations with 7 bits. . Since ASCII only uses 7 bits to encode characters, using 8 bits in computing technology required the inclusion of additional bits. With this extra digit, extended ASCII up to 256 characters can be encoded. . As can be seen in the ASCII table above, ASCII encodes the specified 128 characters as 7-bit integers and was initially based on the (modern) English alphabet. One can print 95 of the encoded characters. These consist of the numbers 0 through 9, the letters lowercase a through z, uppercase a through z, and punctuation. The original ASCII specification also included 33 teletype machine-derived control codes that were not readable. Although the most of these are no longer in use, some are. Tab, line feed, and carriage return codes. . A lowercase letter, for instance, is represented by 1101001 in binary, 69 in hex (where I is the ninth character), and 105 in decimal in the ASCII encoding. American standard, however the cent () doesn’t have a code point in ASCII. Additionally, it does not accept proper nouns with diacritical marks, such as Beyoncé, or English phrases with diacritical marks, such resume or jalapeo. . Overall Reflection . Overall, I’m pleased with my grade because it demonstrates both my knowledge of the material covered in this class thus far and my ability to respond intelligently to multiple-choice questions of this type. The questions I misunderstood were also a teaching moment for me because they helped me understand how to approach issues of that nature going forward to avoid repeating my errors. Given that they nearly always result in real learning experiences for me, I enjoy having the chance to test myself on what we have studied so far and see how well I do. These kinds of exams let me know where my areas of strength and weakness lie and how I may strengthen those areas. I sincerely hope that when it comes time for this trimester’s multiple-choice final, I will demonstrate significant progress in how I respond to MCQ questions. .",
            "url": "https://stg-7.github.io/FastPages/markdown/2023/01/31/mcCB.html",
            "relUrl": "/markdown/2023/01/31/mcCB.html",
            "date": " • Jan 31, 2023"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hello, I’m Shaurya Goel. .",
          "url": "https://stg-7.github.io/FastPages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stg-7.github.io/FastPages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}